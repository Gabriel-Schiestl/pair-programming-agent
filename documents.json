[
  {
    "pattern": "repository",
    "content": "Todo código fica dentro da pasta src;\n\nO código é estruturado dentro de src da seguinte forma:\n- domain(domínio)\n- application(orchestration layer)\n- infra(infrastructure)\n\nRepository:\ninterface dentro de src/domain/repositories/<Nome>.repository.ts\nexemplo:\n\nimport {\n    RepositoryException,\n    RepositoryNoDataFoundException,\n    ResultAsync,\n} from '@qq-framework/basic';\nimport { Agente } from '../models/Agente';\n\nexport interface AgenteRepository {\n    listAgente(): ResultAsync<\n        RepositoryNoDataFoundException | RepositoryException,\n        Agente[]\n    >;\n\n    criarAgente(agente: Agente): ResultAsync<RepositoryException, Agente>;\n\n    excluirAgente(id: string): ResultAsync<RepositoryException, boolean>;\n\n    atualizarAgente(\n        id: string,\n        nome_agente: string,\n        contexto?: string,\n        ia_url?: string,\n        ativa?: boolean,\n        pasta_raiz?: string,\n    ): ResultAsync<RepositoryException, Agente>;\n}\n\nE implementação dentro de infra/repositories/<NomeImpl>.repository.ts\nexemplo:\n\nimport { Injectable } from '@nestjs/common';\nimport { AgenteRepository } from '../../domain/repositories/Agente.repository';\nimport { AgenteMapper } from '../mappers/Agente.mapper';\nimport { Agente } from '../../domain/models/Agente';\nimport { AgenteModel } from '../models/Agente.model';\nimport {\n    R,\n    RepositoryException,\n    RepositoryNoDataFoundException,\n    ResultAsync,\n} from '@qq-framework/basic';\n\n@Injectable()\nexport class AgenteRepositoryImpl implements AgenteRepository {\n    constructor(private readonly agenteMapper: AgenteMapper) {}\n    async listAgente(): ResultAsync<\n        RepositoryNoDataFoundException | RepositoryException,\n        Agente[]\n    > {\n        try {\n            const agenteModel = await AgenteModel.find({\n                select: {\n                    id: true,\n                    nome_agente: true,\n                    ativa: true,\n                    contexto: true,\n                    ia_url: true,\n                    pasta_raiz: true,\n                },\n            });\n\n            if (!agenteModel) {\n                return R.failure(\n                    new RepositoryNoDataFoundException(\n                        'Nenhum agente encontrado',\n                    ),\n                );\n            }\n\n            return R.ok(this.agenteMapper.modelToDomainList(agenteModel));\n        } catch (e) {\n            return R.failure(new RepositoryException(e));\n        }\n    }\n    async criarAgente(\n        agente: Agente,\n    ): ResultAsync<RepositoryException, Agente> {\n        try {\n            const agenteModel = this.agenteMapper.domainToModel(agente);\n            await agenteModel.save();\n            return R.ok(this.agenteMapper.modelToDomain(agenteModel));\n        } catch (e) {\n            return R.failure(new RepositoryException(e));\n        }\n    }\n\n    async excluirAgente(id: string): ResultAsync<RepositoryException, boolean> {\n        try {\n            const deleted = await AgenteModel.delete(id);\n            if (!deleted) {\n                return R.failure(\n                    new RepositoryException(\n                        `Agente com ID ${id} não foi encontrado`,\n                    ),\n                );\n            }\n            return R.ok(true);\n        } catch (e) {\n            return R.failure(new RepositoryException(e));\n        }\n    }\n\n    async atualizarAgente(\n        id: string,\n        nome_agente: string,\n        contexto?: string,\n        ia_url?: string,\n        ativa?: boolean,\n        pasta_raiz?: string,\n    ): ResultAsync<RepositoryException, Agente> {\n        try {\n            const agenteModel = await AgenteModel.findOne({\n                where: {\n                    id,\n                },\n            });\n\n            if (!agenteModel) {\n                return R.failure(\n                    new RepositoryException(\n                        `Agente com ID ${id} não foi encontrado`,\n                    ),\n                );\n            }\n\n            agenteModel.nome_agente = nome_agente;\n            if (contexto !== undefined) agenteModel.contexto = contexto;\n            if (ia_url !== undefined) agenteModel.ia_url = ia_url;\n            if (ativa !== undefined) agenteModel.ativa = ativa;\n            if (pasta_raiz !== undefined) agenteModel.pasta_raiz = pasta_raiz;\n\n            await agenteModel.save();\n\n            return R.ok(this.agenteMapper.modelToDomain(agenteModel));\n        } catch (e) {\n            return R.failure(new RepositoryException(e));\n        }\n    }\n}",
    "language": "TS"
  }
]
